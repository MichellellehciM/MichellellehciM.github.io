<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Django on Tomatos&#39;s Cat</title>
        <link>https://michellellehcim.github.io/tags/django/</link>
        <description>Recent content in Django on Tomatos&#39;s Cat</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <lastBuildDate>Thu, 26 Jun 2025 10:00:00 +0000</lastBuildDate><atom:link href="https://michellellehcim.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ORM 新手入門：什麼是 ORM？讓資料庫操作超直覺，從原理到實作一次搞懂！</title>
        <link>https://michellellehcim.github.io/p/orm-guide/</link>
        <pubDate>Thu, 26 Jun 2025 10:00:00 +0000</pubDate>
        
        <guid>https://michellellehcim.github.io/p/orm-guide/</guid>
        <description>&lt;img src="https://michellellehcim.github.io/p/orm-guide/orm-crud.png" alt="Featured image of post ORM 新手入門：什麼是 ORM？讓資料庫操作超直覺，從原理到實作一次搞懂！" /&gt;&lt;h2 id=&#34;orm-是什麼&#34;&gt;ORM 是什麼？
&lt;/h2&gt;&lt;p&gt;在上一篇 &lt;a class=&#34;link&#34; href=&#34;https://michellellehcim.github.io/p/sql-crud-guide/&#34; &gt;SQL 新手入門&lt;/a&gt;
裡，我們學會了用 SQL 操作資料庫的基本 CRUD，&lt;br&gt;
但當網站越寫越大，每次都要寫一大堆 SQL 指令，難免覺得繁瑣又容易出錯。&lt;/p&gt;
&lt;p&gt;這時候使用 &lt;strong&gt;ORM（Object-Relational Mapping，物件關聯對應）&lt;/strong&gt; 可以直接「操控」資料庫，不用每次都寫 SQL。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ORM (物件關聯對應) 顧名思義就是將關聯式資料庫(Relational Database )的資料，映射到物件(Object)之中。&lt;/li&gt;
&lt;li&gt;白話一點來說，就是 ORM 是一種技術，能把關聯式資料庫（Relational Database）裡的表格資料，自動轉換成程式語言裡的物件。這樣一來，你可以像操作 Python 的物件一樣，輕鬆進行資料的新增、查詢、修改和刪除，不需要再自己寫繁瑣的 SQL 指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;在開始之前，我們來說說 SQL 有哪些缺陷以及 ORM 存在的必要性。&lt;/p&gt;
&lt;h2 id=&#34;為什麼需要-orm&#34;&gt;為什麼需要 ORM？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程式碼和 SQL 混在一起，難維護&lt;/li&gt;
&lt;li&gt;常常拼錯 SQL，出錯找半天&lt;/li&gt;
&lt;li&gt;不同資料庫 SQL 語法還不一樣&lt;/li&gt;
&lt;li&gt;想用 Python 直接操作資料表、欄位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ORM 出現後，你只要跟物件打交道，ORM 可以幫你自動轉換成 SQL。&lt;/strong&gt; (像是程式語言和資料庫中間的翻譯官)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;orm-怎麼運作&#34;&gt;ORM 怎麼運作？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&amp;ldquo;資料表&amp;rdquo; 好比一個 &amp;ldquo;Excel 表格&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ORM 幫你把「表格」翻譯成程式語言的「類別 Class」&lt;/li&gt;
&lt;li&gt;「欄位」就像物件的「屬性 Attribute」&lt;/li&gt;
&lt;li&gt;「一列資料」對應「一個類別的實例（object instance）」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;圖示說明：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;ORM_mermaidchart.png&#34; alt=&#34;ORM 映射流程圖&#34; style=&#34;width:75%;&#34;&gt;
&lt;h2 id=&#34;orm-物件與資料表關聯範例&#34;&gt;ORM 物件與資料表關聯範例
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;範例資料表 :&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;id&lt;/th&gt;
          &lt;th&gt;name&lt;/th&gt;
          &lt;th&gt;age&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;Amy&lt;/td&gt;
          &lt;td&gt;25&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;Bob&lt;/td&gt;
          &lt;td&gt;22&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Model 類別定義 (Django 為例) :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# User model（類別，代表 users 資料表）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 屬性1（attribute），對應 name 欄位&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IntegerField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;# 屬性2（attribute），對應 age 欄位&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Amy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 在Python中就會產生一個物件instance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 產生另一個物件instance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;資料表的每一列（row）＝ 一個物件（object instance）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;用-orm-操作資料庫-vs-傳統-sql-對照&#34;&gt;用 ORM 操作資料庫 vs 傳統 SQL 對照
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;SQL 指令&lt;/th&gt;
          &lt;th&gt;Django ORM 實作&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;新增資料&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;INSERT INTO users (name, age) VALUES (&#39;Amy&#39;, 25);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;User.objects.create(name=&#39;Amy&#39;, age=25)&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;查詢全部&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;SELECT * FROM users;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;User.objects.all()&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;查詢特定&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;SELECT * FROM users WHERE age &amp;gt; 18;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;User.objects.filter(age__gt=18)&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;更新資料&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;UPDATE users SET age=26 WHERE name=&#39;Amy&#39;;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;user = User.objects.get(name=&#39;Amy&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;user.age = 26&lt;/code&gt;&lt;br&gt;&lt;code&gt;user.save()&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;刪除資料&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;DELETE FROM users WHERE name=&#39;Amy&#39;;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;user = User.objects.get(name=&#39;Amy&#39;)&lt;/code&gt;&lt;br&gt;&lt;code&gt;user.delete()&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;django-orm-基本語法示範&#34;&gt;Django ORM 基本語法示範
&lt;/h2&gt;&lt;h3 id=&#34;1-定義-model資料表&#34;&gt;1️⃣ 定義 Model（資料表）
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;django.db&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IntegerField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2-新增資料create&#34;&gt;2️⃣ 新增資料（Create）
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Amy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3-查詢資料read&#34;&gt;3️⃣ 查詢資料（Read）
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 查全部&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;adults&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age__gte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 查詢年齡大於等於 18 歲&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;4-更新資料update&#34;&gt;4️⃣ 更新資料（Update）
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Amy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;5-刪除資料delete&#34;&gt;5️⃣ 刪除資料（Delete）
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user = User.objects.get(name=&amp;#39;Amy&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;user.delete()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;不過，雖然 ORM 讓資料庫操作更直覺、易讀，但在處理複雜查詢、效能優化或跨框架遷移時，
有時還是需要熟悉 SQL，才能避免隱藏的陷阱與效能瓶頸。&lt;/p&gt;
&lt;h2 id=&#34;orm-的優缺點&#34;&gt;ORM 的優缺點
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;優點&lt;/th&gt;
          &lt;th&gt;缺點&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1. 用程式語言操作資料表，直覺好讀&lt;/td&gt;
          &lt;td&gt;1. 某些複雜查詢 ORM 不夠彈性&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2. 可減少手寫 SQL 出錯&lt;/td&gt;
          &lt;td&gt;2. ORM 產生的 SQL 可能不夠最佳化（N+1 問題）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3. 注入風險(資料被惡意指令篡改或竄改的危險)&lt;/td&gt;
          &lt;td&gt;3. 初學者容易忽略資料庫性能調校&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4. 資料庫換成 MySQL/PG/SQLite 幾乎不用改程式&lt;/td&gt;
          &lt;td&gt;4. ORM 有學習曲線＝剛學需適應新用法，熟悉後更順手。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;補充：「N+1 問題」指 ORM 產生太多查詢，導致效能變差。可以用 select_related、prefetch_related 等優化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;常見-qa&#34;&gt;常見 Q&amp;amp;A
&lt;/h2&gt;&lt;h3 id=&#34;q1-用-orm-就不用學-sql-嗎&#34;&gt;Q1. 用 ORM 就不用學 SQL 嗎？
&lt;/h3&gt;&lt;p&gt;基本 CRUD 沒問題，但遇到複雜查詢還是要補點 SQL 基礎，才能寫 raw SQL 或 debug ORM 問題。&lt;/p&gt;
&lt;h3 id=&#34;q2-orm-支援哪些資料庫&#34;&gt;Q2. ORM 支援哪些資料庫？
&lt;/h3&gt;&lt;p&gt;常見如 MySQL、PostgreSQL、SQLite…各大框架 ORM 幾乎都支援。&lt;/p&gt;
&lt;h3 id=&#34;q3-orm-真的完全取代-sql-嗎&#34;&gt;Q3. ORM 真的完全取代 SQL 嗎？
&lt;/h3&gt;&lt;p&gt;大多數情境可以，但像資料遷移（migrate）、複雜聚合或特殊優化，有時還是得用 SQL。&lt;/p&gt;
&lt;h3 id=&#34;q4-orm-會幫忙防止-sql-注入嗎&#34;&gt;Q4. ORM 會幫忙防止 SQL 注入嗎？
&lt;/h3&gt;&lt;p&gt;只要用 ORM 提供的查詢語法，不拼接字串，基本都能防注入！&lt;/p&gt;
&lt;h2 id=&#34;腦力激盪&#34;&gt;腦力激盪
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用 ORM 新增一筆 User 資料，怎麼寫？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎麼查詢所有年齡大於 18 歲的使用者？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORM 有哪些場景用起來比 SQL 方便？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你遇過什麼 ORM 出錯的狀況？（如 N+1 查詢）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;（參考答案）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 ORM 新增一筆 User 資料，怎麼寫？&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;怎麼查詢所有年齡大於 18 歲的使用者？&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age__gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;ORM 有哪些場景用起來比 SQL 方便？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接存取 Python 物件屬性，不用再記一堆 SQL 字串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;結構調整（migrate）時，程式碼和資料表自動同步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更容易撰寫單元測試&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你遇過什麼 ORM 出錯的狀況？（如 N+1 查詢）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查詢關聯資料時產生大量 SQL（N+1 問題）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;條件寫錯，資料沒查到或誤刪&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;model 定義和資料表不同步導致錯誤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;忘記 save()、delete()，資料沒更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;延伸&#34;&gt;延伸
&lt;/h2&gt;&lt;p&gt;這篇帶你入門 ORM 的原理與基本用法。如果你對資料庫「關聯」感興趣，之後將會介紹：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一對多、多對多資料表關聯怎麼設計？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORM 怎麼處理表關聯的查詢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORM 進階優化技巧（如 select_related）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>網站是怎麼運作的？</title>
        <link>https://michellellehcim.github.io/p/web-work/</link>
        <pubDate>Fri, 18 Oct 2024 10:00:00 +0000</pubDate>
        
        <guid>https://michellellehcim.github.io/p/web-work/</guid>
        <description>&lt;img src="https://michellellehcim.github.io/p/web-work/web_work.png" alt="Featured image of post 網站是怎麼運作的？" /&gt;&lt;h1 id=&#34;-網站是怎麼運作的&#34;&gt;🌐 網站是怎麼運作的？
&lt;/h1&gt;&lt;p&gt;你有沒有好奇過，當我們打開一個網站的時候，背後到底發生了什麼？今天，我們來聊聊網站的運作方式，以及如何建立一個購物網站的前端和後端架構。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-前端和後端誰負責什麼&#34;&gt;🖥️ 前端和後端：誰負責什麼？
&lt;/h2&gt;&lt;p&gt;一個網站通常分為兩個主要部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;🎨 前端（Front-end）&lt;/strong&gt;：使用者看到的部分，包括畫面、按鈕、文字和圖片。它負責和使用者互動，內容會在瀏覽器中運行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;🔧 後端（Back-end）&lt;/strong&gt;：藏在幕後的部分，運行在伺服器上，負責處理資料、驗證規則，並確保前端取得正確資訊。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-使用者訪問網站時發生了什麼&#34;&gt;🌍 使用者訪問網站時發生了什麼？
&lt;/h2&gt;&lt;p&gt;假設使用者 Jenny 想逛我們的購物網站，她在瀏覽器輸入 &lt;code&gt;goodbuy.com&lt;/code&gt;，然後按下 Enter。這時：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;瀏覽器會發送一個請求，類似說：「嗨~~我想看看首頁！」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伺服器收到後會處理這個請求，然後回傳結果給瀏覽器。這一來一回的過程是透過 &lt;strong&gt;HTTP（🔗 Hypertext Transfer Protocol）&lt;/strong&gt; 完成的，這是一種讓瀏覽器和伺服器溝通的語言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(註) &lt;code&gt;goodbuy.com&lt;/code&gt;是&lt;strong&gt;URL（🌐 Uniform Resource Locator）&lt;/strong&gt; 等於是網站的地址，幫助 Jenny 的瀏覽器找到伺服器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-後端如何提供內容&#34;&gt;⚙️ 後端如何提供內容？
&lt;/h2&gt;&lt;p&gt;當伺服器收到請求後，有兩種方式回應：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;📄 生成完整的網頁並回傳&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伺服器會使用 &lt;strong&gt;HTML（超文本標記語言）&lt;/strong&gt; 建立完整的網頁，然後傳送給使用者。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;📊 只提供所需數據，讓前端生成頁面&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伺服器只傳回資料（例如產品清單），由前端工具（如 React）生成畫面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-選擇第二種方式的好處&#34;&gt;🤔 選擇第二種方式的好處:
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;減輕伺服器壓力&lt;/strong&gt;：伺服器只專注處理數據，能夠服務更多使用者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;擴展性更好&lt;/strong&gt;：隨著用戶數量增加，伺服器的負擔也更容易管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這也是為什麼現在越來越多網站使用 &lt;strong&gt;React&lt;/strong&gt;、&lt;strong&gt;Angular&lt;/strong&gt; 和 &lt;strong&gt;Vue&lt;/strong&gt; 來處理前端。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-後端的角色資料的管家&#34;&gt;🛠️ 後端的角色：資料的管家
&lt;/h2&gt;&lt;p&gt;如果把頁面生成交給前端，那後端的主要任務就是管理數據，並提供 &lt;strong&gt;API（應用程式介面，Application Programming Interface）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;-api-是什麼&#34;&gt;🎛️ API 是什麼？
&lt;/h3&gt;&lt;p&gt;API 就像遙控器上的按鈕：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每個按鈕都有特定功能，比如開關電視或調整音量。&lt;/li&gt;
&lt;li&gt;同樣，API 是伺服器提供的「按鈕」，讓前端用來取得產品資料或提交訂單。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-用-django-建立-api&#34;&gt;🐍 用 Django 建立 API
&lt;/h2&gt;&lt;p&gt;在後端世界裡，&lt;strong&gt;Django&lt;/strong&gt; 是一個非常受歡迎的框架，能快速幫助我們建立 API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django 讓處理數據和提供接口變得更簡單高效。&lt;/li&gt;
&lt;li&gt;前端應用（例如使用 React 或 Angular 開發的網站）可以透過 API 與後端互動，完成查詢產品或提交訂單的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-結論&#34;&gt;🏁 結論
&lt;/h2&gt;&lt;p&gt;現代網站開發強調分工合作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;🎨 前端&lt;/strong&gt; 負責生成畫面，提升使用者體驗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;🔧 後端&lt;/strong&gt; 專注處理數據和業務邏輯，提供高效的 API。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你想建立一個高效的網站，像 Django 這樣的後端框架絕對是值得考慮的好選擇！希望這次的分享讓你對網站的運作有更清楚的了解！ 🚀&lt;/p&gt;
</description>
        </item>
        <item>
        <title>為什麼Youtube、instagrm等知名企業愛用 Django？</title>
        <link>https://michellellehcim.github.io/p/django-intro/</link>
        <pubDate>Wed, 16 Oct 2024 20:00:00 +0000</pubDate>
        
        <guid>https://michellellehcim.github.io/p/django-intro/</guid>
        <description>&lt;img src="https://michellellehcim.github.io/p/django-intro/django_intro.png" alt="Featured image of post 為什麼Youtube、instagrm等知名企業愛用 Django？" /&gt;&lt;p&gt;Django 是目前最受歡迎的 Web 框架之一，許多企業，包括 &lt;strong&gt;Instagram、Spotify、Dropbox、Pinterest&lt;/strong&gt; 等，都選擇 Django 作為開發後端的主要技術。為什麼 Django 受到企業青睞？本文將從 &lt;strong&gt;開發效率、安全性、可擴展性、社群支持&lt;/strong&gt; 等方面分析 Django 的優勢。&lt;/p&gt;
&lt;h2 id=&#34;1-開發效率高&#34;&gt;1. 開發效率高
&lt;/h2&gt;&lt;p&gt;Django 遵循 &lt;strong&gt;&amp;ldquo;Batteries Included&amp;rdquo;（電池全配）&lt;/strong&gt; 原則，內建許多強大的功能，減少開發者從零開始設計系統的時間。&lt;/p&gt;
&lt;h3 id=&#34;-內建功能&#34;&gt;✅ 內建功能
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ORM（Object-Relational Mapping）&lt;/strong&gt;：讓開發者用 Python 直接操作資料庫，避免手寫 SQL。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份驗證（Auth System）&lt;/strong&gt;：內建用戶管理系統，處理登入、註冊、權限控管。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Admin Panel（管理後台）&lt;/strong&gt;：自動生成管理介面，方便管理數據。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表單處理（Forms）&lt;/strong&gt;：內建表單驗證與數據處理，提高開發效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-快速開發-mvp&#34;&gt;✅ 快速開發 MVP
&lt;/h3&gt;&lt;p&gt;Django 幫助企業快速建立 &lt;strong&gt;最小可行產品（MVP）&lt;/strong&gt;，適合新創公司測試市場需求，降低開發成本。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-高安全性&#34;&gt;2. 高安全性
&lt;/h2&gt;&lt;p&gt;Django 內建多種安全機制，幫助企業降低安全風險，避免常見的 Web 攻擊。&lt;/p&gt;
&lt;h3 id=&#34;-內建安全防護&#34;&gt;🔒 內建安全防護
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SQL Injection 防護&lt;/strong&gt;：ORM 自動處理 SQL 查詢，避免 SQL 注入攻擊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSRF（跨站請求偽造）防護&lt;/strong&gt;：防止未經授權的請求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XSS（跨站腳本攻擊）防護&lt;/strong&gt;：自動轉義 HTML，防止惡意腳本執行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密碼加密存儲&lt;/strong&gt;：使用 PBKDF2、Argon2、BCrypt 等強大加密算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對於處理&lt;strong&gt;敏感數據&lt;/strong&gt;的企業（如金融、醫療、電子商務），Django 是一個值得信賴的選擇。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-可擴展性強&#34;&gt;3. 可擴展性強
&lt;/h2&gt;&lt;p&gt;Django 適用於 &lt;strong&gt;從小型應用到大型系統&lt;/strong&gt;，隨著業務成長，可以輕鬆擴展。&lt;/p&gt;
&lt;h3 id=&#34;-企業級擴展能力&#34;&gt;📈 企業級擴展能力
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;支援快取（Caching）&lt;/strong&gt;：Redis、Memcached 讓 Django 快速處理大量請求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可水平擴展&lt;/strong&gt;：支援負載均衡，可擴展到多台伺服器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支援 Microservices&lt;/strong&gt;：透過 Django REST Framework（DRF），可輕鬆開發 API 服務，適合微服務架構。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;許多大型應用，如 &lt;strong&gt;Instagram、Disqus、Mozilla&lt;/strong&gt;，都用 Django 來處理大規模流量。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-強大的社群與企業支持&#34;&gt;4. 強大的社群與企業支持
&lt;/h2&gt;&lt;p&gt;Django 由 &lt;strong&gt;Django Software Foundation（DSF）&lt;/strong&gt; 維護，擁有活躍的開源社群和大量第三方套件。&lt;/p&gt;
&lt;h3 id=&#34;-企業與開發者社群&#34;&gt;🌍 企業與開發者社群
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;開發者眾多&lt;/strong&gt;：Python 是全球最受歡迎的語言之一，學習 Django 門檻低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三方擴展豐富&lt;/strong&gt;：如 Django REST Framework（DRF）、Celery（背景任務）、Channels（即時應用）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;免費與開源&lt;/strong&gt;：Django 採用 BSD 授權，企業可自由使用，無需支付授權費。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些優勢讓 Django 成為企業開發的首選之一。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-與-python-生態系統無縫整合&#34;&gt;5. 與 Python 生態系統無縫整合
&lt;/h2&gt;&lt;p&gt;Python 是 &lt;strong&gt;AI、機器學習、數據分析&lt;/strong&gt; 領域的熱門語言，而 Django 可以輕鬆與這些技術結合。&lt;/p&gt;
&lt;h3 id=&#34;-ai--數據應用&#34;&gt;🤖 AI / 數據應用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Django + Pandas / NumPy&lt;/strong&gt;：適合數據分析應用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django + TensorFlow / PyTorch&lt;/strong&gt;：可開發 AI 應用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django + Celery&lt;/strong&gt;：用於處理大規模數據、排程任務。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對於 AI 驅動的企業，如 &lt;strong&gt;Netflix、Spotify&lt;/strong&gt;，Django 是理想的選擇。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-結論django-為何受企業歡迎&#34;&gt;🔥 結論：Django 為何受企業歡迎？
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;企業需求&lt;/th&gt;
          &lt;th&gt;Django 解決方案&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;快速開發&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;內建 ORM、Auth、Admin Panel，提高開發效率&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;高安全性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;內建 CSRF、XSS、SQL Injection 防護&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;可擴展性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;支援快取、負載均衡、微服務架構&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;AI / 數據應用&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;與 Python 生態整合，適合數據驅動企業&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;社群與企業支持&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;開源、免費、大量第三方套件支援&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;綜合來看，Django 具備 &lt;strong&gt;高效、安全、可擴展&lt;/strong&gt; 的特性，能夠滿足企業從小型應用到大型系統的需求，因此成為許多企業的首選 Web 框架！🚀&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;📌 &lt;strong&gt;你使用過 Django 嗎？歡迎留言分享你的開發經驗！&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
